#!/usr/bin/env python
#
# Mix Epoxy log from output and log message files, with syncing
#
# Copyright (c) 2013 Red Hat, Inc. All rights reserved.
#
# This copyrighted material is made available to anyone wishing
# to use, modify, copy, or redistribute it subject to the terms
# and conditions of the GNU General Public License version 2.

import re
import os
import select
import sys

READ_SIZE = 4096

class Bunch:
    def __init__(self, **kwds):
        self.__dict__.update(kwds)

def usage(file):
    file.write("Usage: %s OUTPUT MESSAGE SYNC\n" %
               re.match(".*?([^/]+)$", sys.argv[0]).group(1))

def input_flush(input):
    if len(input.buf) > 0:
        input.write_line(input.buf + "\n", False)
        input.buf = ""

def input_transfer(poll, input):
    if input.eof or not input.ready:
        return False
    else:
        buf = os.read(input.fd, READ_SIZE)
        if buf == "":
            input_flush(input)
            poll.unregister(input.fd)
            input.eof = True
        else:
            def repl(match):
                input.write_line(match.group(), True)
                return ""
            input.buf = re.sub("[^\n]*\n", repl, input.buf + buf)
            input.ready = False
        return True

def mix(log_file, output_path, messages_path, sync_path):
    output_fd       = os.open(output_path, os.O_RDONLY | os.O_NONBLOCK)
    messages_fd     = os.open(messages_path, os.O_RDONLY | os.O_NONBLOCK)
    # Sync should be opened last to match the opening order in ep_log.sh and
    # avoid blocking the shell.
    sync_fd         = os.open(sync_path, os.O_WRONLY)

    def write_output_line(line, complete):
        log_file.write("OUTPUT " + line)
        log_file.flush()

    output_input = Bunch(fd = output_fd, ready = False, eof = False,
                         buf = "", write_line = write_output_line)

    def write_messages_line(line, complete):
        input_flush(output_input)
        log_file.write(line)
        log_file.flush()
        if complete:
            os.write(sync_fd, "\n")

    messages_input = Bunch(fd = messages_fd, ready = False, eof = False,
                           buf = "", write_line = write_messages_line)
    input_map = {output_fd : output_input, messages_fd : messages_input}

    poll = select.poll()
    for fd in input_map.iterkeys():
        poll.register(fd, select.POLLIN)

    while not output_input.eof or not messages_input.eof:
        fd_event_list = poll.poll()
        for fd_event in fd_event_list:
            input_map[fd_event[0]].ready = \
                (fd_event[1] & (select.POLLIN | select.POLLHUP)) != 0
        if not input_transfer(poll, output_input):
            input_transfer(poll, messages_input)

    os.close(sync_fd)
    os.close(messages_fd)
    os.close(output_fd)

if len(sys.argv) != 4:
    usage(sys.stderr)
    sys.exit(1)

try:
    mix(sys.stdout, *sys.argv[1:])
except OSError:
    # Output message only for OS errors
    sys.stderr.write(str(sys.exc_info()[1]) + "\n")
    sys.exit(1)
sys.exit(0)
