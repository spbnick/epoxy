#!/usr/bin/env lua
--
-- Match a text against an extended glob-like pattern.
--
-- Copyright (c) 2012 Red Hat, Inc. All rights reserved.
--
-- This copyrighted material is made available to anyone wishing
-- to use, modify, copy, or redistribute it subject to the terms
-- and conditions of the GNU General Public License version 2.

---
-- Exit status
--
local status    = {
    MATCH       = 0,
    MISMATCH    = 1,
    ERROR       = 2,
}

---
-- Output usage information to a file.
--
-- @param file  The file to output to.
--
function usage(file)
    file:write(([[
Usage: %s [option...] [--] pattern text
Match a text against an extended glob-like pattern.

Options:
    -h, --help              This help message.
    -p, --pattern-prefix    Consider full pattern match optional.
    -t, --text-prefix       Consider full text match optional.

]]):format(arg[0]:match("[^/]+$")))
end

---
-- Parce a brackets expression part of a pattern into a character set.
--
-- @param brackets  Pattern part at the beginning of the brackets expression
--                  contents.
--
-- @return Character set,
--         index of the pattern character after the end of the brackets
--         expression.
--
function parse_brackets(brackets)
    local stopped_at
    local range_list = {}
    local negative = false
    local start
    local dash = false

    for i = 1, #brackets, 1 do
        local c = brackets:sub(i, i)
        if i == 1 and c == "!" then
            negative = true
        elseif (i == 1 or i == 2 and negative) and c == "]" then
            start = c
        else
            if c == "]" then
                stopped_at = i + 1
                break
            end
            if start == nil then
                start = c
            else
                if not dash and c == "-" then
                    dash = true
                else
                    if dash then
                        table.insert(range_list, {start, c})
                        dash = false
                        start = nil
                    else
                        table.insert(range_list, {start, start})
                        start = c
                    end
                end
            end
        end
    end

    if stopped_at == nil then
        error("Unterminated brackets expression")
    end

    if start ~= nil then
        table.insert(range_list, {start, start})
        if dash then
            table.insert(range_list, {"-", "-"})
            dash = false
        end
        start = nil
    end

    return {negative, range_list}, stopped_at
end

---
-- Parce a pattern set parentheses expression part of a pattern into a
-- pattern set.
--
-- @param parens    Pattern part at the beginning of the parentheses
--                  expression contents.
--
-- @return Pattern set,
--         index of the pattern character after the end of the parentheses
--         expression.
--
function parse_parens(parens)
    local set   = {}
    local chars = {}
    local depth = 0
    local i     = 1
    local c

    while i <= #parens do
        c = parens:sub(i, i)
        if c == "|" and depth == 0 then
            table.insert(set, table.concat(chars))
            chars = {}
        else
            if c == "(" then
                depth = depth + 1
            elseif c == ")" then
                if depth == 0 then
                    table.insert(set, table.concat(chars))
                    return set, i + 1
                else
                    depth = depth - 1
                end
            elseif c == "\\" then
                table.insert(chars, c)
                i = i + 1
                if i > #parens then
                    error("Incomplete pattern escape sequence")
                end
                c = parens:sub(i, i)
            end
            table.insert(chars, c)
        end
        i = i + 1
    end

    error("Unterminated parentheses expression")
end

---
-- Match a character against a character set.
--
-- @param set   The character set to match against.
-- @param c     The character to match.
--
-- @return True if matched, false otherwise.
--
function match_char_set(set, c)
    local negative, range_list = unpack(set)

    for _, range in ipairs(range_list) do
        if c >= range[1] and c <= range[2] then
            return not negative
        end
    end

    return negative
end

---
-- Match a text against a pattern set, selecting longest match.
--
-- @param set           Pattern set to match against.
-- @param text          Text to match.
-- @param max_pattern   Prefer maximum pattern match, if true, prefer maximum
--                      text match, if false or nil.
--
-- @return Maximum full pattern match text stop index or nil,
--         maximum partial pattern match text stop index or nil.
--
function match_pattern_set(set, text, max_pattern)
    local max_full_ts
    local max_part_ts
    local ps
    local ts

    --[[
    local sig = "match_pattern_set({"
    for _, p in ipairs(set) do
        sig = sig .. ' "' .. p .. '"'
    end
    sig = sig .. '}, "' .. text .. '", ' .. tostring(max_pattern) .. ')'
    io.stderr:write(sig, ">\n")
    --]]

    for _, p in ipairs(set) do
        ps, ts = match(p, text, max_pattern)
        if ps > #p then
            if max_full_ts == nil or ts > max_full_ts then
                max_full_ts = ts
            end
        else
            if max_part_ts == nil or ts > max_part_ts then
                max_part_ts = ts
            end
        end
    end

    --[[
    io.stderr:write(sig, "< ", tostring(max_full_ts), ", ",
                    tostring(max_part_ts), "\n")
    --]]
    return max_full_ts, max_part_ts
end

---
-- Match an operation of a pattern set.
--
-- @param op            Operator character: "?", "*", "+", "@", or "!",
--                      according to extglob description in bash(1).
-- @param set           Pattern set to match against.
-- @param text          Text to match.
-- @param max_pattern   Prefer maximum pattern match, if true, prefer maximum
--                      text match, if false or nil.
--
-- @return Maximum full pattern match text stop index or nil,
--         maximum partial pattern match text stop index or nil.
--
function match_operated_pattern_set(op, set, text, max_pattern)
    local full_ts
    local part_ts

    --[[
    local sig = "match_operated_pattern_set(" .. op .. ", {"
    for _, p in ipairs(set) do
        sig = sig .. ' "' .. p .. '"'
    end
    sig = sig .. '}, "' .. text .. '", ' .. tostring(max_pattern) .. ')'
    io.stderr:write(sig, ">\n")
    --]]

    if op == "@" then
        full_ts, part_ts = match_pattern_set(set, text, max_pattern)
    elseif op == "!" then
        full_ts, part_ts = match_pattern_set(set, text, max_pattern)
        if full_ts == nil or full_ts <= #text then
            full_ts = #text + 1
            part_ts = nil
        else
            full_ts = nil
            part_ts = #text + 1
        end
    elseif op == "?" then
        if #text == 0 then
            full_ts, part_ts = #text + 1, nil
        else
            full_ts, part_ts = match_pattern_set(set, text, max_pattern)
        end
    elseif op == "*" or op == "+" then
        if #text == 0 and op == "*" then
            full_ts, part_ts = #text + 1, nil
        else
            local ti = 1
            while ti <= #text + 1 do
                local set_full_ts, set_part_ts =
                        match_pattern_set(set, text:sub(ti), max_pattern)
                if set_full_ts ~= nil then
                    ti = ti + set_full_ts - 1
                    full_ts = ti
                    if set_full_ts == 1 then
                        break
                    end
                else
                    if set_part_ts ~= nil then
                        part_ts = ti + set_part_ts - 1
                    end
                    break
                end
            end
        end
    end

    --[[
    io.stderr:write(sig, "< ", tostring(full_ts), ", ",
                    tostring(part_ts), "\n")
    --]]
    return full_ts, part_ts
end

---
-- Greedy matching function interface.
--
-- @param text          Text to match.
-- @param max_pattern   Prefer maximum pattern match, if true, prefer maximum
--                      text match, if false or nil.
--
-- @return Maximum full pattern match text stop index or nil,
--         maximum partial pattern match text stop index or nil.
--

---
-- Match a text first with a greedy matching function, then with the rest of
-- the pattern.
--
-- @param func          The greedy matching function.
-- @param func_pi       Index of the first character of the pattern expression
--                      used to produce the greedy matching function.
-- @param func_ti       Index of the first text character to match with the
--                      greedy function.
-- @param match_pi      Index of the first character of the rest of the
--                      pattern to match.
-- @param pattern       Pattern to match.
-- @param text          Text to match.
-- @param max_pattern   Prefer maximum pattern match, if true, prefer maximum
--                      text match, if false or nil.
--
-- @return Pattern match stop index, text match stop index.
--
function match_greedy(func, func_pi, func_ti, match_pi,
                      pattern, text, max_pattern)
    local match_ti
    local max_part_ps       = func_pi
    local max_part_ts       = func_ti

    --[[
    local sig=('match_greedy(%s, %d, %d, %d, %q, %q, %s)'):
                format(tostring(func), func_pi, func_ti, match_pi,
                       pattern, text, tostring(max_pattern))
    io.stderr:write(sig, ">\n")
    --]]

    match_ti = #text + 1
    while match_ti >= func_ti do
        local full_ts, part_ts = func(text:sub(func_ti, match_ti - 1),
                                      max_pattern)

        if not max_pattern and part_ts ~= nil and part_ts > max_part_ts then
            max_part_ts = func_ti + part_ts - 1
            max_part_ps = func_pi
        end
        if full_ts ~= nil then
            match_ti = func_ti + full_ts - 1
            match_ps, match_ts = match(pattern:sub(match_pi),
                                       text:sub(match_ti),
                                       max_pattern)
            match_ps = match_pi + match_ps - 1
            match_ts = match_ti + match_ts - 1
            if match_ps > #pattern and match_ts > #text then
                --[[
                io.stderr:write(sig, "< ", tostring(match_ps), ", ",
                                tostring(match_ts), "\n")
                --]]
                return match_ps, match_ts
            else
                if max_pattern and match_ps > max_part_ps or
                   not max_pattern and match_ts > max_part_ts then
                    max_part_ps = match_ps
                    max_part_ts = match_ts
                end
            end
        end
        match_ti = match_ti - 1
    end

    --[[
    io.stderr:write(sig, "< ", tostring(max_part_ps), ", ",
                    tostring(max_part_ts), "\n")
    --]]
    return max_part_ps, max_part_ts
end

---
-- Match a text against a pattern.
--
-- @param pattern       Pattern to match against.
-- @param text          Text to match.
-- @param max_pattern   Prefer maximum pattern match, if true, prefer maximum
--                      text match, if false or nil.
--
-- @return Pattern match stop index, text match stop index.
--
function match(pattern, text, max_pattern)
    local pi = 1
    local ps
    local p
    local ti = 1

    --[[
    local sig = ('match(%q, %q, %s)'):
                    format(pattern, text, tostring(max_pattern))
    io.stderr:write(sig, ">\n")
    --]]

    while true do
        if pi > #pattern then
            break
        end

        p = pattern:sub(pi, pi)

        -- If it's an extended matching operator
        if pattern:sub(pi, pi + 1):match("^[?*+@!]%($") then
            local pattern_set
            pattern_set, ps = parse_parens(pattern:sub(pi + 2))
            pi, ti =
                match_greedy(
                    function (text, max_pattern)
                        return match_operated_pattern_set(p, pattern_set,
                                                          text, max_pattern)
                    end,
                    pi, ti, pi + 2 + ps - 1, pattern, text, max_pattern)
            break
        end

        if p == "*" then
            pi, ti =
                match_greedy(
                    function (text, max_pattern) return true, #text + 1 end,
                    pi, ti, pi + 1, pattern, text, max_pattern)
            break
        end

        if ti > #text then
            break
        end

        if p == "?" then
            pi = pi + 1
        elseif p == "[" then
            local char_set
            char_set, ps = parse_brackets(pattern:sub(pi + 1))
            if not match_char_set(char_set, text:sub(ti, ti)) then
                break
            end
            pi = pi + 1
            pi = pi + ps - 1
        else
            if p == "\\" then
                pi = pi + 1
                if pi > #pattern then
                    error("Incomplete pattern escape sequence")
                end
                p = pattern:sub(pi, pi)
            end

            if text:sub(ti, ti) ~= p then
                break
            end
            pi = pi + 1
        end

        ti = ti + 1
    end

    --[[
    io.stderr:write(sig, "< ", tostring(pi), ", ", tostring(ti), "\n")
    --]]
    return pi, ti
end

--
-- Main routine
--
local got_dash_dash     = false
local pattern_prefix    = false
local text_prefix       = false
local parameters        = {}

-- Parse command line arguments
for _, a in ipairs(arg) do
    if not got_dash_dash and a:sub(1, 1) == "-" then
        if a == "--" then
            got_dash_dash = true
        elseif a == "-h" or a == "--help" then
            usage(io.stdout)
            os.exit(0)
        elseif a == "-p" or a == "--pattern-prefix" then
            pattern_prefix = true
        elseif a == "-t" or a == "--text-prefix" then
            text_prefix = true
        else
            io.stderr:write("Unknown option: " .. a .. "\n")
            usage(io.stderr)
            os.exit(status.ERROR)
        end
    else
        table.insert(parameters, a)
    end
end

if #parameters ~= 2 then
    io.stderr:write("Invalid number of positional arguments\n")
    usage(io.stderr)
    os.exit(status.ERROR)
end

local pattern, text = unpack(parameters)

-- Match
local ok, ps_or_error, ts =
        pcall(match, pattern, text, text_prefix)

-- Report result
if ok then
    local ps = ps_or_error
    local matched = (text_prefix or ts > #text) and
                    (pattern_prefix or ps > #pattern)
    os.exit(matched and status.MATCH or status.MISMATCH)
else
    local error = ps_or_error
    io.stderr:write(error, "\n")
    os.exit(status.ERROR)
end
