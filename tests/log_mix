#!/bin/bash
#
# bt_log_mix test suite
#
# Copyright (c) 2013 Red Hat, Inc. All rights reserved.
#
# This copyrighted material is made available to anyone wishing
# to use, modify, copy, or redistribute it subject to the terms
# and conditions of the GNU General Public License version 2.

. bt_suite_init.sh

declare -r SUITE_TMPDIR=`mktemp -d -t bt_log_mix_test.XXXXXXXXXX`
bt_teardown_push rm -R "$SUITE_TMPDIR"
declare -r OUTPUT_FIFO="$SUITE_TMPDIR/output.fifo"
declare -r MESSAGES_FIFO="$SUITE_TMPDIR/messages.fifo"
declare -r SYNC_FIFO="$SUITE_TMPDIR/sync.fifo"
declare -r LOG_FILE="$SUITE_TMPDIR/log.txt"

mkfifo "$OUTPUT_FIFO"
mkfifo "$MESSAGES_FIFO"
mkfifo "$SYNC_FIFO"

# Execute a log comparison test
# Args: name
# Input: bt_log_mix-interacting script and expected log, separated by a '-' on
#        a line by itself, will have leading space removed from every line;
#        the script will be executed with stdout connected to "output", stderr
#        - to "messages" and stdin - to "sync" of bt_log_mix.
function t()
{
    declare -r name="$1"
    declare -r expr_and_log=`sed -e 's/^\s\+//'`
    declare -r expr=`echo -n "\$expr_and_log" |
                        sed -ne '/^-$/q; p'`
    declare -r expected_log=`echo -n "\$expr_and_log" |
                                sed -ne 'x; /^-$/{x;p;x}; x; /^-$/x'`

    bt_test_begin "$name"; (
        . bt_test_init.sh
        declare result_log
        declare status=0
        result_log=`eval "
              exec $BT_USER_FD1>&1- $BT_USER_FD2>&2-
              bt_log_mix \"\$OUTPUT_FIFO\" \
                         \"\$MESSAGES_FIFO\" \
                         \"\$SYNC_FIFO\" \
                         0</dev/null 1>&3 2>&4 &
              exec 0<\"\$SYNC_FIFO\" 1>\"\$OUTPUT_FIFO\" 2>\"\$MESSAGES_FIFO\"
              $expr
              exec 0<&- 1>&- 2>&- 1>&$BT_USER_FD1- 2>&$BT_USER_FD2-
              wait %1
        "` || status=$?
        if [ $status != 0 ]; then
            echo "Unexpected exit status: $status"
            exit 1
        fi
        if [ "$result_log" != "$expected_log" ]; then
            echo "=== EXPECTING ==="
            echo "$expected_log"
            echo "==== RESULT ====="
            echo "$result_log"
            echo "================="
            echo "Unexpected output"
            exit 1
        fi
    ); bt_test_end
}

t empty <<<"
    -"

t output_empty_line <<<"
    echo
    -
    OUTPUT "

t output_one_char <<<"
    echo x
    -
    OUTPUT x"

t output_hundred_times < <(
    echo '
    for ((i = 0; i < 100; i++)); do
        echo $i
    done
    -'
    for ((i = 0; i < 100; i++)); do
        echo "OUTPUT $i"
    done
)

t message <<<"
    echo x >&2
    read
    -
    x"

t message_hundred_times < <(
    echo '
    for ((i = 0; i < 100; i++)); do
        echo $i >&2
        read
    done
    -'
    for ((i = 0; i < 100; i++)); do
        echo "$i"
    done
)

t output_and_message <<<"
    echo x
    echo y >&2
    read
    -
    OUTPUT x
    y"

t message_and_output <<<"
    echo y >&2
    read
    echo x
    -
    y
    OUTPUT x"

t output_and_message_hundred_times < <(
    echo '
    for ((i = 0; i < 100; i++)); do
        echo $i
        echo $i >&2
        read
    done
    -'
    for ((i = 0; i < 100; i++)); do
        echo "OUTPUT $i"
        echo "$i"
    done
)

t message_and_output_hundred_times < <(
    echo '
    for ((i = 0; i < 100; i++)); do
        echo $i >&2
        read
        echo $i
    done
    -'
    for ((i = 0; i < 100; i++)); do
        echo "$i"
        echo "OUTPUT $i"
    done
)

t closed_output <<<"
    echo x
    echo y >&2
    read
    exec 1>&-
    echo z >&2
    read
    -
    OUTPUT x
    y
    z"

t closed_messages <<<"
    echo x
    echo y >&2
    read
    exec 2>&-
    echo z
    -
    OUTPUT x
    y
    OUTPUT z"

t incomplete_line_at_end <<<"
    echo -n x
    -
    OUTPUT x"

t incomplete_line_before_message <<<"
    echo -n x
    echo y >&2
    read
    -
    OUTPUT x
    y"
