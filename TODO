Add support for TERMINATED test status, meaning the suite was terminated with
SIGINT or SIGTERM. Ignore SIGINT/SIGTERM in tests which are waiting for
suites/tests to finish. Terminate the whole suite if a suite/test finishes
with TERMINATED, similarly to panic.

Add verification of the suite and test construction validity. E.g. check if
shell initialization corresponds to the type of shell being entered, that it
is done at exactly the right bash level, that any test command is being
executed within appropriately-initialized shell, that appropriate bt_*end is
called, etc.

Consider implementing bt_glob_valid or bt_glob_is_valid for checking pattern
validity. This might require pattern "compilation" and common library.

Add support for an option for specifying suite/test description, prohibit
newlines in description.

Oh, BTW, newlines are allowed in XML attributes, so it's safe to specify
BT_INCLUDE and other whitespace-separated list variable values.

Consider adding support for disabling bt_abort_assert execution to improve
performance. Measure the difference.

Add support for remote test execution. Make the shell stdout be the log pipe
specified through the appropriate environment variables.

Add support for entering interactive mode before/after a specific or a failed
test.

Consider renaming ERRORED, PANICKED and ABORTED statuses to ERROR_SETUP,
ERROR_CLEANUP and ERROR_ASSERTION, or something, to simplify status
interpretation for new users.

Consider adding abbreviated interface support:
    bt_s
    bt_si
    bt_sb
    bt_se
    bt_t
    bt_ti
    bt_tb
    bt_te

Consider printing backtrace with most specific message last, especially WRT
automatically reporting failure reason.

Think of renaming "unwaiving" to "claiming".

Convert tool executables to Python 2.4+ for better portability to RHEL5.

Add proper logging and reporting support. Design logging protocol. Design log
filtering tool supporting filtering by minimum message severity, test depth
and height, and minimum test status severity. Develop several sinks: simple
file writing sink, rhts logging sink, human-summary sink (for immediate
console output).

Consider distributing logging with tee and process substitution.
Console logging should be done to stdout. Stderr should receive only
pre-logging error messages and out-of-band framework errors.

Consider adding status explanations to the human-summary sink.

Use the following log structure:
STRUCT BEGIN 'path' description
       ENTER 'path'
       EXIT  'path' status
       END   'path' status reason
OUTPUT line
TRACE line

There should only be such top level tags as make sense to be separate
filtering levels.

The default severity (?) for the log file sink would be OUTPUT.
The rhts log and human summary sinks would only need STRUCT.
Set default minimum test status severity for filtering to PASSED, so SKIPPED
tests are omitted.
